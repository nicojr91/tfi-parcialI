@{
    ViewBag.Title = "Home Page";
}

<div class="row">
    
</div>

<div class="row">
    <div class="col-md-12">
        <select id="select-sucursal" class="controls">
            <option disabled selected>Sucursales</option>
            @foreach (var suc in ViewBag.sucursales)
            {
                <option value="@suc.Id">@suc.Zona</option>
            }
        </select>
    </div>

    <div class="col-md-12">
        <input id="pac-input" class="controls" type="text" placeholder="Search Box">
        <div id="map" style="height: 600px;"></div>
    </div>

    <br />
    <div class="col-md-6">
        <b>From:</b> <span id="origin-dir">@ViewBag.sucursales[0].Direccion</span> <br />
        <b>To:</b> <div id="dir" style="display: inline-block;"></div>
    </div>
    <div class="col-md-6" id="data" style="text-align: right;">
        
    </div>  
</div>


@section scripts {
<script>
    var markers = [];
    var origin = "@ViewBag.sucursales[0].Direccion";

    function initAutocomplete() {
        var latitud = @ViewBag.sucursales[0].Latitud;
        var longitud = @ViewBag.sucursales[0].Longitud;

        var pos = { lat: latitud, lng: longitud };

        var map = new google.maps.Map(document.getElementById('map'), {
            center: pos,
            zoom: 13,
            mapTypeId: 'roadmap',
            mapTypeControl: false,
            panControl: false,
            streetViewControl: false
        });
        markers["origin"] = new google.maps.Marker({
            position: pos,
            map: map,
            title: "@ViewBag.sucursales[0].Zona"
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(document.getElementById('select-sucursal'));
        

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function (place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                /*var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };*/

                $("#dir").text(place.formatted_address);
                //console.log(place);
                origin = "@ViewBag.sucursales[0].Direccion";
                $.getJSON("/Home/GetPrice", { "origin": origin, "place": place.formatted_address }, function (data) {
                    if (!data.success) {
                        alert("error");
                        return;
                    }
                    $("#data").children().remove()
                    $("#data").append("<b>Distance: </b><span>" + data.totalKm + " km </span><br/>");
                    $("#data").append("<b>Price Km: </b><span>" + data.kmPrice + " km </span><br/>");
                    $("#data").append("<b>Total Price: </b><span>$" + data.price + "</span><br/>");
                    console.log(data);
                });

                // Create a marker for each place.
                if(markers.hasOwnProperty("destination")) {
                    markers["destination"].setMap(null);
                }
                markers["destination"] = new google.maps.Marker({
                    map: map,
                    //icon: icon,
                    title: place.name,
                    position: place.geometry.location
                });

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });

        $("#select-sucursal").on("change", function(){
            $.getJSON("/Home/GetSucursal", { "id": $(this).val() }, function (data) {
                if (!data.success) {
                    alert("error");
                    return;
                }

                $("#origin-dir").text(data.suc.Direccion);

                markers["origin"].setMap(null);
                markers["origin"] = new google.maps.Marker({
                    position: { lat: Number(data.suc.Latitud), lng: Number(data.suc.Longitud) },
                    map: map,
                    title: data.suc.Zona
                });

                markers["destination"].setMap(null);
                
                console.log(data);
            });
        });

    }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDtJ9ref3ICzSP_28zOlGMOXSl4bnsyKHk&libraries=places&callback=initAutocomplete" async defer></script>

}